buildscript {
    repositories {
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.3'
    }
}

group 'com.istar'
version '1.0'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'com.bmuschko.tomcat'

sourceCompatibility = 1.7

def env = System.getProperty("profile") ?: "dev"

println "build env: $env"

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources", "src/main/filters/$env"]
        }
    }
}

repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
    mavenCentral()
}
project.webAppDirName = "src/main/webapp"

dependencies {
    compile fileTree(dir:'lib', include:'*.jar')
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile 'org.springframework:spring-webmvc:4.1.6.RELEASE'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'javax.servlet:jstl:1.2'
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.apache.httpcomponents:httpclient:4.3.6'
    compile 'com.alibaba:fastjson:1.2.24'
    compile 'org.mongodb:mongo-java-driver:2.14.3'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.mashape.unirest:unirest-java:1.4.9'
    compile 'org.codehaus.jackson:jackson-core-lgpl:1.8.1'
    compile 'org.codehaus.jackson:jackson-mapper-lgpl:1.8.1'
    compile 'net.databinder:dispatch-jsoup_2.9.1:0.8.10'
    compile 'commons-beanutils:commons-beanutils:20030211.134440'
    compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.5.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.5.1'
    compile group: 'org.jodd', name: 'jodd', version: '3.4.1'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.2'
    compile group: 'joda-time', name: 'joda-time', version: '2.9.9'
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.23'
    compile group: 'org.apache.directory.studio', name: 'org.apache.commons.io', version: '2.4'
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.9'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.6'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
    compile group: 'org.elasticsearch', name: 'elasticsearch', version: '2.4.4'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.10.2'
    compile group: 'org.apache.kafka', name: 'kafka_2.11', version: '0.8.2.2'
    compile group: 'org.htmlparser', name: 'htmlparser', version: '2.1'
    compile group: 'cn.hutool', name: 'hutool-all', version: '4.0.7'
    compile group: "org.springframework",name: "spring-support",version:"2.0.6"
    compile group: "javax.mail",name: "mail",version:"1.4.4"
    compile group: 'com.aliyun.oss', name: 'aliyun-sdk-oss', version: '3.1.0'
    compile group: 'com.aliyun', name: 'aliyun-java-sdk-core', version: '3.7.1'
    compile group: 'com.aliyun', name: 'aliyun-java-sdk-sts', version: '2.1.6'
    compile 'net.sf.json-lib:json-lib:2.4:jdk15'
    testCompile 'junit:junit:4.11'

    def tomcatVersion = '8.0.27'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
[tomcatRun,tomcatRunWar]*.with {
    contextPath = '/'
    httpPort = 8080
}

[jettyRun, jettyRunWar]*.with {
    webDefaultXml = file("${rootDir}/webdefault.xml")
}
jettyRun{
    webAppSourceDirectory file("$projectDir/src/main/webapp")
    httpPort 8080
    contextPath '/'
    scanIntervalSeconds 0
    reload "automatic"
}

//jar {
//    String someString = ''
//    configurations.runtime.each {someString = someString + " lib//"+it.name}
//    manifest {
//        attributes 'Main-Class': 'com.istar.mediabroken'
//        attributes 'Class-Path': someString
//    }
//}
////清除上次的编译过的文件
//task clearPj(type:Delete){
//    delete 'build','target'
//}

task copyJar(type:Copy) {
    from configurations.runtime
    into ('build/lib')
}

////依赖编译，然后打包JAR
//task taskJar(type:Jar, dependsOn: build) {
//    from 'build/classes/main'
//    from "$buildDir/resources/main"
//    destinationDir = file('build/libs')
//}
//////把JAR复制到目标目录
//task release(type: Copy,dependsOn: [build,copyJar]) {
//
//}
//
//////清除上次的发布过的文件
////task releaseClear(type:Delete){
////    delete "$buildDir/release"
////    delete "$buildDir/libs"
////    delete "$buildDir/resources"
////
////}
//////依赖编译，然后打包JAR
////task taskJar(type:Jar, dependsOn: build) {
////    from 'build/classes/main'
////    from "$buildDir/resources/main"
////    destinationDir = file('build/libs')
////
////}
//////复制所有文件到发布目录
////task release(type: Sync, dependsOn: [releaseClear,taskJar]) {
////    from configurations.runtime
////    into "$buildDir/release"
////    println version
////}


/*
    后台控制脚本

    请在控制台加入以下参数:

    打包线上后台脚本
    gradle distConsoleJar -Dprofile=online

    打包测试环境后台脚本
    gradle distConsoleJar -Dprofile=test

    然后到build/console目录中查找打包好的文件
 --*/
task consoleJar(type:Copy, dependsOn: [clean, jar]) {
    from configurations.runtime
    from 'build/libs'
    into ('build/console/lib')
}

task distConsoleJar(type:Copy, dependsOn: [consoleJar]) {
    from 'src/main/console'
    into ('build/console')
}

/*-- 后台控制脚本 */